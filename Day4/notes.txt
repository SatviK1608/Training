-----------------JWT-----------------

1. hmara data us token ke andr store hota hai
2. agar ek payload/data se agr token generate hua hai to hm us token ko encode krenge to voh hme hmara data dedega
3. jiske paas bbhi secret token hoga voh token bna skta hai to yeh super safe rehni chahiye
4. ab hm jwt.sign ke andr payload(plain object) aur secret token pass krenge jis s hmare liye ek token bnega jis se hm verify kr skte hai
5. ab yeh token jo mila hai ise hm save kra skte hai yn fir bearer header m set krke bhej skte hai jb request marenge tb
6. yeh generated token ke andr hmara data hoga
6. aur hm fir client s mile token ko verify kraenge apne secret token key se using jwt.verify(token,secrettokenkey)






jwt send a bearer token and who ever holds it is an authorized user
jwt are considered as statless token





How do JSON Web Tokens work?  -- JWT WEBSITE

In authentication, when the user successfully logs in using their credentials, a JSON Web Token will be returned. 
Since tokens are credentials, great care must be taken to prevent security issues. 
In general, you should not keep tokens longer than required.

You also should not store sensitive session data in browser storage due to lack of security.

Whenever the user wants to access a protected route or resource, the user agent should send the JWT, typically in the Authorization header using the Bearer schema. 
The content of the header should look like the following:
Authorization: Bearer <token>

This can be, in certain cases, a stateless authorization mechanism. 
The server's protected routes will check for a valid JWT in the Authorization header, and if it's present, the user will be allowed to access protected resources. 
If the JWT contains the necessary data, the need to query the database for certain operations may be reduced, though this may not always be the case.